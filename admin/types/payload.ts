/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    'profile-images': ProfileImage;
    blogs: Blog;
    'blog-categories': BlogCategory;
    'blog-images': BlogImage;
    'blog-tags': BlogTag;
    'job-postings': JobPosting;
    'job-locations': JobLocation;
    'job-forms': JobForm;
    'job-applications': JobApplication;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    'profile-images': ProfileImagesSelect<false> | ProfileImagesSelect<true>;
    blogs: BlogsSelect<false> | BlogsSelect<true>;
    'blog-categories': BlogCategoriesSelect<false> | BlogCategoriesSelect<true>;
    'blog-images': BlogImagesSelect<false> | BlogImagesSelect<true>;
    'blog-tags': BlogTagsSelect<false> | BlogTagsSelect<true>;
    'job-postings': JobPostingsSelect<false> | JobPostingsSelect<true>;
    'job-locations': JobLocationsSelect<false> | JobLocationsSelect<true>;
    'job-forms': JobFormsSelect<false> | JobFormsSelect<true>;
    'job-applications': JobApplicationsSelect<false> | JobApplicationsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  name: string;
  bio?: string | null;
  avatar?: (number | null) | ProfileImage;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "profile-images".
 */
export interface ProfileImage {
  id: number;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * Manage blog posts
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blogs".
 */
export interface Blog {
  id: number;
  title: string;
  /**
   * This will be automatically generated from the title once the blog post is saved.
   */
  slug?: string | null;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  thumbnail: number | BlogImage;
  /**
   * Author of the blog post. This will be displayed on the blog post.
   */
  author: number | User;
  /**
   * Categories of the blog post. Recommended to add at least one category.
   */
  categories: (number | BlogCategory)[];
  tags: (number | BlogTag)[];
  /**
   * Check this box to publish the blog post.
   */
  published?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blog-images".
 */
export interface BlogImage {
  id: number;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blog-categories".
 */
export interface BlogCategory {
  id: number;
  name: string;
  /**
   * This will be automatically generated from the name. It must be unique.
   */
  slug?: string | null;
  /**
   * A short description of the category
   */
  description?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blog-tags".
 */
export interface BlogTag {
  id: number;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "job-postings".
 */
export interface JobPosting {
  id: number;
  role: string;
  uuid?: string | null;
  job_location: number | JobLocation;
  /**
   * A description of the job posting. The first 160 characters will be used as a preview. Please ensure the first 160 characters provide a clear and concise summary of the job posting.
   */
  description: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  short_description?: string | null;
  job_types: ('full-time' | 'part-time' | 'contract' | 'temporary' | 'internship')[];
  min_pay?: number | null;
  max_pay?: number | null;
  /**
   * Toggle between draft and published to control the visibility of the job posting.
   */
  status?: ('draft' | 'published') | null;
  start_date?: string | null;
  job_expiration?: string | null;
  /**
   * Select the job form that will be used for this job posting.
   */
  job_questions?: (number | null) | JobForm;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "job-locations".
 */
export interface JobLocation {
  id: number;
  location: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "job-forms".
 */
export interface JobForm {
  id: number;
  /**
   * This name will be used to identify the form in the admin panel.
   */
  name: string;
  form: {
    fields: {
      fieldType: 'text' | 'longText' | 'email' | 'number' | 'url' | 'date' | 'select' | 'radio' | 'checkbox';
      label: string;
      properties?: {
        required?: boolean;
        helperText?: string;
        options?: string;
        placeholder?: string;
      };
    }[];
  };
  /**
   * Add a new field to your form. You can customize the properties once the field is added.
   */
  fields?: {
    fieldType?: ('text' | 'longText' | 'email' | 'number' | 'url' | 'date' | 'select' | 'radio' | 'checkbox') | null;
    fieldLabel?: string | null;
  };
  openFieldIndex?: number | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * Job applications submitted by users.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "job-applications".
 */
export interface JobApplication {
  id: number;
  first_name: string;
  last_name: string;
  email: string;
  mobile?: string | null;
  cv: string;
  job: number | JobPosting;
  assessment?: {
    answers: {};
    fields: {
      label?: string;
      fieldType?: string;
      properties?: {
        [k: string]: unknown;
      };
    }[];
  };
  uuid?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'profile-images';
        value: number | ProfileImage;
      } | null)
    | ({
        relationTo: 'blogs';
        value: number | Blog;
      } | null)
    | ({
        relationTo: 'blog-categories';
        value: number | BlogCategory;
      } | null)
    | ({
        relationTo: 'blog-images';
        value: number | BlogImage;
      } | null)
    | ({
        relationTo: 'blog-tags';
        value: number | BlogTag;
      } | null)
    | ({
        relationTo: 'job-postings';
        value: number | JobPosting;
      } | null)
    | ({
        relationTo: 'job-locations';
        value: number | JobLocation;
      } | null)
    | ({
        relationTo: 'job-forms';
        value: number | JobForm;
      } | null)
    | ({
        relationTo: 'job-applications';
        value: number | JobApplication;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  bio?: T;
  avatar?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "profile-images_select".
 */
export interface ProfileImagesSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blogs_select".
 */
export interface BlogsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  content?: T;
  thumbnail?: T;
  author?: T;
  categories?: T;
  tags?: T;
  published?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blog-categories_select".
 */
export interface BlogCategoriesSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  description?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blog-images_select".
 */
export interface BlogImagesSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blog-tags_select".
 */
export interface BlogTagsSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "job-postings_select".
 */
export interface JobPostingsSelect<T extends boolean = true> {
  role?: T;
  uuid?: T;
  job_location?: T;
  description?: T;
  short_description?: T;
  job_types?: T;
  min_pay?: T;
  max_pay?: T;
  status?: T;
  start_date?: T;
  job_expiration?: T;
  job_questions?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "job-locations_select".
 */
export interface JobLocationsSelect<T extends boolean = true> {
  location?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "job-forms_select".
 */
export interface JobFormsSelect<T extends boolean = true> {
  name?: T;
  form?: T;
  fields?:
    | T
    | {
        fieldType?: T;
        fieldLabel?: T;
      };
  openFieldIndex?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "job-applications_select".
 */
export interface JobApplicationsSelect<T extends boolean = true> {
  first_name?: T;
  last_name?: T;
  email?: T;
  mobile?: T;
  cv?: T;
  job?: T;
  assessment?: T;
  uuid?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}